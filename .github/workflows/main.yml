name: Example Workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 16.x
      uses: actions/setup-node@v2.5.3
      with:
        node-version: '16.x'
    - name: Set up Python 
      uses: actions/setup-python@v2.4.4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install -r requirements.txt 

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-20.04
    needs: tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.8.0
      - name: Login to Docker 
        uses: docker/login-action@v1.12.1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2.7.0
        with:
          push: true
          tags: umar1593/stripe:latest
          file: ./Dockerfile

  deploy:
    name: Deploy on Yandex.Cloud
    runs-on: ubuntu-20.04
    needs: build_and_push_to_docker_hub
    steps:
      - name: SSH into remote host
        uses: appleboy/ssh-action@v1.12.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker-compose stop
            sudo docker-compose rm web
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }} >> .env
            echo STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d
            sudo docker-compose exec -T web python manage.py migrate
            sudo docker-compose exec -T web python manage.py collectstatic --no-input

  clean_up_docker_objects:
    name: Clean up unused Docker objects
    runs-on: ubuntu-20.04
    needs: deploy
    steps:
      - name: Clean up Docker objects
        uses: peter-evans/docker-cleanup@v2.7.0
        with:
          containers: "all"
          images: "local"
          volumes: "local"
